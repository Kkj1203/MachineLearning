# -*- coding: utf-8 -*-
"""Copy of Assignment 3-Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyw46mfJ7TTWWcJv2lo3GhTnYPRSbT3x

# Import library files
"""

# Commented out IPython magic to ensure Python compatibility.
# tensorflow is an open-source machine learning framework developed by Google.
# It is widely used for building and training deep learning models
import tensorflow as tf
#keras is a high-level deep learning API that provides an easy-to-use interface for building and training neural networks.
from tensorflow import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

"""# Load dataset"""

#load breast cancer dataset
from sklearn.datasets import load_breast_cancer
cancer=load_breast_cancer()

X=pd.DataFrame(cancer.data,columns=cancer.feature_names)
X.head()

X.info()

y=pd.DataFrame(cancer.target,columns=['target'])
y['target'].unique()

y['target'].value_counts()

"""# Check Missing value"""

#X.isnull().sum()

"""# Apply scaling"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

X=pd.DataFrame(sc.fit_transform(X),columns=X.columns)

X.head()

"""# Split dataset into train and test"""

#stratify=y means Maintains Class Balance
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.10,stratify=y)
X_train.shape,y_train.shape,X_test.shape,y_test.shape

from tensorflow.keras.layers import Dense,Flatten,Dropout
from tensorflow.keras import Sequential

"""# Design Model"""

model=Sequential()
model.add(Dense(30,activation='relu',input_shape=(X_train.shape[1],)))
model.add(Dropout(0.2))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(1,activation='sigmoid'))

"""# Compile Model"""

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

"""# Check Model Summary"""

model.summary()

#keras.utils.plot_model(model, show_dtype=True,
#                       show_layer_names=True, show_shapes=True,to_file='model.png')

"""# Compile Model"""

# An epoch is one complete pass
# batch size is the number of training examples used in one pass (forward and backward).
history=model.fit(X_train,y_train,batch_size=10,epochs=100,validation_split=0.1)#,class_weight={0: weights[0], 1: weights[1]})

"""# Accuracy and Loss Plot"""

plt.plot(history.history['accuracy'], label='Training accuracy')
plt.plot(history.history['val_accuracy'], label='Validation accuracy')
plt.title('Accuracy Plot')
plt.ylabel('accuracy')
plt.xlabel('Epoch')
plt.legend(loc="upper left")
plt.show()

plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.title('Loss Plot')
plt.ylabel('Loss value')
plt.xlabel('Epoch')
plt.legend(loc="upper left")
plt.show()

"""# Evaluate Model"""

model.evaluate(X_test,y_test)

#y_pred = np.argmax(model.predict(X_test.values), axis=-1)
y_pred = model.predict(X_test).astype(int)
#y_pred

"""# Classification report"""

# plot classification report
# https://www.evidentlyai.com/classification-metrics/confusion-matrix
from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

# Plot classification report

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()