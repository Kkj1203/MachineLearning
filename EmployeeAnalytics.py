# -*- coding: utf-8 -*-
"""MLlab_ass3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FUJZu6CI0whsCu0WH4W4avFY4sl8JX_N
"""

pip install tensorflow pandas scikit-learn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

df = pd.read_csv("/content/employees.csv")

df = df.dropna()

df = df.drop(columns=['First Name', 'Start Date', 'Last Login Time'])

df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Team'].fillna(df['Team'].mode()[0], inplace=True)
df['Senior Management'].fillna(df['Senior Management'].mode()[0], inplace=True)

label_enc = LabelEncoder()
df['Gender'] = label_enc.fit_transform(df['Gender'])
df['Team'] = label_enc.fit_transform(df['Team'])
df['Senior Management'] = df['Senior Management'].astype(int)

X = df.drop(columns=['Senior Management', 'Salary'])
y_class = df['Senior Management']
y_reg = df['Salary']

X_train, X_test, y_train_class, y_test_class = train_test_split(X, y_class, test_size=0.2, random_state=42)
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X, y_reg, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train_reg = scaler.fit_transform(X_train_reg)
X_test_reg = scaler.transform(X_test_reg)

model_class = keras.Sequential([
    layers.Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(8, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Sigmoid for binary classification
])

model_class.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model_class.fit(X_train, y_train_class, epochs=20, batch_size=16, validation_data=(X_test, y_test_class))

model_reg = keras.Sequential([
    layers.Dense(16, activation='relu', input_shape=(X_train_reg.shape[1],)),
    layers.Dense(8, activation='relu'),
    layers.Dense(1)  # No activation for regression
])

model_reg.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
model_reg.fit(X_train_reg, y_train_reg, epochs=20, batch_size=16, validation_data=(X_test_reg, y_test_reg))

class_predictions = model_class.predict(X_test)
class_predictions = (class_predictions > 0.5).astype(int)
reg_predictions = model_reg.predict(X_test_reg)

print("Classification Predictions:", class_predictions[:5].flatten())
print("Regression Predictions:", reg_predictions[:5].flatten())